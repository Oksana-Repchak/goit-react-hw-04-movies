{"version":3,"sources":["services/movies-api.js","images/imagePlaceholder.png","components/MovieList/MovieList.jsx","components/MovieList/MovieList.module.css","components/Searchbar/Searchbar.module.css","components/Searchbar/Searchbar.jsx","views/MoviesPageView.js"],"names":["BASE_URL","API_KEY","fetchWithErrorHandling","a","url","config","fetch","response","ok","json","Promise","reject","Error","fetchTrendingMovies","fetchMoviesByName","name","fetchMovieDetails","id","fetchMovieCast","fetchMovieReviews","MovieList","movies","title","className","s","wrapper","list","map","movie","item","to","link","image","src","poster_path","imagePlaceholder","alt","module","exports","Searchbar","onSubmit","useState","movieName","setMovieName","SearchForm","e","preventDefault","trim","toast","type","SearchFormButton","SearchFormButtonLabel","value","onChange","target","toLowerCase","SearchFormInput","autoComplete","autoFocus","placeholder","SearchMovies","setMovies","isLoading","setIsLoading","history","useHistory","location","useLocation","searchQuery","URLSearchParams","search","get","useEffect","then","data","results","queryString","push","Loader"],"mappings":"gVAAMA,EAAW,+BACXC,EAAU,mC,SAIDC,I,2EAAf,4CAAAC,EAAA,6DAAsCC,EAAtC,+BAA4C,GAAIC,EAAhD,+BAAyD,GAAzD,SACyBC,MAAMF,EAAKC,GADpC,YACQE,EADR,QAEkBC,GAFlB,iCAGYD,EAASE,OAHrB,gDAIMC,QAAQC,OAAO,IAAIC,MAAM,cAJ/B,oF,sBAOO,SAASC,IAEd,OAAOX,EADE,UAAMF,EAAN,uCAA6CC,IAIjD,SAASa,EAAkBC,GAEhC,OAAOb,EADE,UAAMF,EAAN,iCAAuCC,EAAvC,kBAAwDc,EAAxD,+CAIJ,SAASC,EAAkBC,GAEhC,OAAOf,EADE,UAAMF,EAAN,kBAAwBiB,EAAxB,oBAAsChB,EAAtC,oBAIJ,SAASiB,EAAeD,GAE7B,OAAOf,EADE,UAAMF,EAAN,kBAAwBiB,EAAxB,4BAA8ChB,EAA9C,oBAIJ,SAASkB,EAAkBF,GAEhC,OAAOf,EADE,UAAMF,EAAN,kBAAwBiB,EAAxB,4BAA8ChB,EAA9C,sB,gCCjCI,QAA0B,8C,2ECkC1BmB,IA5Bf,YAAuC,IAAlBC,EAAiB,EAAjBA,OAAQC,EAAS,EAATA,MAC3B,OACE,sBAAKC,UAAWC,IAAEC,QAAlB,UACE,6BAAKH,IACL,oBAAIC,UAAWC,IAAEE,KAAjB,SACGL,EAAOM,KAAI,SAAAC,GACV,OACE,oBAAmBL,UAAWC,IAAEK,KAAhC,SACE,eAAC,IAAD,CAAMC,GAAE,iBAAYF,EAAMX,IAAMM,UAAWC,IAAEO,KAA7C,UACE,qBACER,UAAWC,IAAEQ,MACbC,IACEL,EAAMM,YAAN,yCACsCN,EAAMM,aACxCC,IAENC,IAAKR,EAAMN,QAEb,mBAAGC,UAAWC,IAAEF,MAAhB,SAAwBM,EAAMN,YAXzBM,EAAMX,c,mBCZ3BoB,EAAOC,QAAU,CAAC,QAAU,2BAA2B,KAAO,wBAAwB,KAAO,wBAAwB,MAAQ,yBAAyB,KAAO,wBAAwB,MAAQ,2B,mBCA7LD,EAAOC,QAAU,CAAC,UAAY,6BAA6B,WAAa,8BAA8B,iBAAmB,oCAAoC,sBAAwB,yCAAyC,gBAAkB,qC,iKCmDjOC,MA7Cf,YAAkC,IAAbC,EAAY,EAAZA,SAAY,EACGC,mBAAS,IADZ,mBACxBC,EADwB,KACbC,EADa,KAoB/B,OACE,qBAAKpB,UAAWC,IAAEe,UAAlB,SACE,uBAAMhB,UAAWC,IAAEoB,WAAYJ,SAfd,SAAAK,GACnBA,EAAEC,iBAEuB,KAArBJ,EAAUK,QAKdP,EAASE,GAETC,EAAa,KANXK,YAAM,8BAWN,UACE,wBAAQC,KAAK,SAAS1B,UAAWC,IAAE0B,iBAAnC,SACE,sBAAM3B,UAAWC,IAAE2B,sBAAnB,sBAGF,uBACEC,MAAOV,EACPW,SA1Ba,SAAAR,GACnBF,EAAaE,EAAES,OAAOF,MAAMG,gBA0BtBhC,UAAWC,IAAEgC,gBACbP,KAAK,OACLQ,aAAa,MACbC,WAAS,EACTC,YAAY,sB,gBClCP,SAASC,IAAgB,IAAD,EACTnB,mBAAS,IADA,mBAC9BpB,EAD8B,KACtBwC,EADsB,OAEHpB,oBAAS,GAFN,mBAE9BqB,EAF8B,KAEnBC,EAFmB,KAI/BC,EAAUC,cACVC,EAAWC,cAEXC,EAAc,IAAIC,gBAAgBH,EAASI,QAAQC,IAAI,SAiB7D,OAXAC,qBAAU,WACY,KAAhBJ,IAGJL,GAAa,GACbjD,YAAkBsD,GAAaK,MAAK,SAAAC,GAClCb,EAAUa,EAAKC,SACfZ,GAAa,SAEd,CAACK,IAGF,qCACE,cAAC,EAAD,CAAW5B,SAjBO,SAAAoC,GACpBZ,EAAQa,KAAR,2BAAkBX,GAAlB,IAA4BI,OAAO,SAAD,OAAWM,SAkB1CR,GACC,cAAChD,EAAA,EAAD,CACEC,OAAQA,EACRC,MAAK,6BAAwB8C,KAGhCN,GAAa,cAACgB,EAAA,EAAD","file":"static/js/MoviesPageView.37e599f6.chunk.js","sourcesContent":["const BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'b590a88f82d6ad86947c7c69a15dac78';\n\n// export const POSTER_URL = 'https://image.tmdb.org/t/p/w500';\n\nasync function fetchWithErrorHandling(url = '', config = {}) {\n  const response = await fetch(url, config);\n  return response.ok\n    ? await response.json()\n    : Promise.reject(new Error('Not found'));\n}\n\nexport function fetchTrendingMovies() {\n  const url = `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`;\n  return fetchWithErrorHandling(url);\n}\n\nexport function fetchMoviesByName(name) {\n  const url = `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${name}&language=en-US&page=1&include_adult=false`;\n  return fetchWithErrorHandling(url);\n}\n\nexport function fetchMovieDetails(id) {\n  const url = `${BASE_URL}/movie/${id}?api_key=${API_KEY}&language=en-US`;\n  return fetchWithErrorHandling(url);\n}\n\nexport function fetchMovieCast(id) {\n  const url = `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}&language=en-US`;\n  return fetchWithErrorHandling(url);\n}\n\nexport function fetchMovieReviews(id) {\n  const url = `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}&language=en-US`;\n  return fetchWithErrorHandling(url);\n}\n","export default __webpack_public_path__ + \"static/media/imagePlaceholder.6787cdde.png\";","import { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport s from './MovieList.module.css';\nimport imagePlaceholder from '../../images/imagePlaceholder.png';\n\nfunction MovieList({ movies, title }) {\n  return (\n    <div className={s.wrapper}>\n      <h2>{title}</h2>\n      <ul className={s.list}>\n        {movies.map(movie => {\n          return (\n            <li key={movie.id} className={s.item}>\n              <Link to={`movies/${movie.id}`} className={s.link}>\n                <img\n                  className={s.image}\n                  src={\n                    movie.poster_path\n                      ? `https://image.tmdb.org/t/p/w500${movie.poster_path}`\n                      : imagePlaceholder\n                  }\n                  alt={movie.title}\n                />\n                <p className={s.title}>{movie.title}</p>\n              </Link>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n\nexport default MovieList;\n\nMovieList.propTypes = {\n  movies: PropTypes.arrayOf(PropTypes.object).isRequired,\n  title: PropTypes.string.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"MovieList_wrapper__3L9Fp\",\"list\":\"MovieList_list__2nSB2\",\"item\":\"MovieList_item__31uqU\",\"image\":\"MovieList_image__ztF-E\",\"link\":\"MovieList_link__1Tv3d\",\"title\":\"MovieList_title__TxDkf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Searchbar\":\"Searchbar_Searchbar__2LDM8\",\"SearchForm\":\"Searchbar_SearchForm__2qxl7\",\"SearchFormButton\":\"Searchbar_SearchFormButton__2nvQT\",\"SearchFormButtonLabel\":\"Searchbar_SearchFormButtonLabel__2OdMS\",\"SearchFormInput\":\"Searchbar_SearchFormInput__21iym\"};","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport s from './Searchbar.module.css';\n\nfunction Searchbar({ onSubmit }) {\n  const [movieName, setMovieName] = useState('');\n\n  const handleChange = e => {\n    setMovieName(e.target.value.toLowerCase());\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (movieName.trim() === '') {\n      toast('Please enter search query');\n      return;\n    }\n\n    onSubmit(movieName);\n\n    setMovieName('');\n  };\n\n  return (\n    <div className={s.Searchbar}>\n      <form className={s.SearchForm} onSubmit={handleSubmit}>\n        <button type=\"submit\" className={s.SearchFormButton}>\n          <span className={s.SearchFormButtonLabel}>Search</span>\n        </button>\n\n        <input\n          value={movieName}\n          onChange={handleChange}\n          className={s.SearchFormInput}\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search film\"\n        />\n      </form>\n    </div>\n  );\n}\n\nSearchbar.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default Searchbar;\n","import { useState, useEffect } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { fetchMoviesByName } from '../services/movies-api';\nimport Searchbar from '../components/Searchbar';\nimport MovieList from '../components/MovieList';\nimport Loader from '../components/Loader';\n\nexport default function SearchMovies() {\n  const [movies, setMovies] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n\n  const history = useHistory();\n  const location = useLocation();\n\n  const searchQuery = new URLSearchParams(location.search).get('query');\n\n  const onChangeQuery = queryString => {\n    history.push({ ...location, search: `query=${queryString}` });\n  };\n\n  useEffect(() => {\n    if (searchQuery === '') {\n      return;\n    }\n    setIsLoading(true);\n    fetchMoviesByName(searchQuery).then(data => {\n      setMovies(data.results);\n      setIsLoading(false);\n    });\n  }, [searchQuery]);\n\n  return (\n    <>\n      <Searchbar onSubmit={onChangeQuery} />\n\n      {searchQuery && (\n        <MovieList\n          movies={movies}\n          title={`Search results for ${searchQuery}`}\n        />\n      )}\n      {isLoading && <Loader />}\n    </>\n  );\n}\n"],"sourceRoot":""}